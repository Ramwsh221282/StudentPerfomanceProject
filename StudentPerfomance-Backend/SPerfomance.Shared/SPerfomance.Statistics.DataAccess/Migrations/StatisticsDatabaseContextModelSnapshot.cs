// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SPerfomance.Statistics.DataAccess;

#nullable disable

namespace SPerfomance.Statistics.DataAccess.Migrations
{
    [DbContext(typeof(StatisticsDatabaseContext))]
    partial class StatisticsDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.ControlWeekReportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RowNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ControlWeekReports");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.CourseReportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId")
                        .IsUnique();

                    b.ToTable("CourseReports");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.CourseReportEntityPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<byte>("Course")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("CourseReportEntityParts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DepartmentStatisticsReportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId")
                        .IsUnique();

                    b.ToTable("DepartmentStatisticsReports");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DepartmentStatisticsReportPartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("DepartmentStatisticsReportParts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DirectionCodeReportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId")
                        .IsUnique();

                    b.ToTable("DirectionCodeReports");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DirectionCodeReportPartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("DirectionCodeReportParts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DirectionTypeReportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId")
                        .IsUnique();

                    b.ToTable("DirectionTypeReports");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DirectionTypeReportEntityPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<string>("DirectionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("DirectionTypeReportParts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.GroupStatisticsReportEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte>("AtSemester")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<string>("DirectionCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("GroupStatisticsReports");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.StudentStatisticsOnDisciplinePartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisciplineName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("StudentStatisticsOnDisciplines");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.StudentStatisticsPartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentPatronymic")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("StudentRecordBook")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentSurname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("StudentStatisticsReports");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.TeacherStatisticsReportPartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<double>("Perfomance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("RootId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherPatronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherSurname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("TeacherStatisticsReportParts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.CourseReportEntity", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.ControlWeekReportEntity", "Root")
                        .WithOne("CourseReport")
                        .HasForeignKey("SPerfomance.Statistics.DataAccess.EntityModels.CourseReportEntity", "RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.CourseReportEntityPart", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.CourseReportEntity", "Root")
                        .WithMany("Parts")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DepartmentStatisticsReportEntity", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.ControlWeekReportEntity", "Root")
                        .WithOne("DepartmentReport")
                        .HasForeignKey("SPerfomance.Statistics.DataAccess.EntityModels.DepartmentStatisticsReportEntity", "RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DepartmentStatisticsReportPartEntity", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.DepartmentStatisticsReportEntity", "Root")
                        .WithMany("Parts")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DirectionCodeReportEntity", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.ControlWeekReportEntity", "Root")
                        .WithOne("DirectionCodeReport")
                        .HasForeignKey("SPerfomance.Statistics.DataAccess.EntityModels.DirectionCodeReportEntity", "RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DirectionCodeReportPartEntity", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.DirectionCodeReportEntity", "Root")
                        .WithMany("Parts")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DirectionTypeReportEntity", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.ControlWeekReportEntity", "Root")
                        .WithOne("DirectionTypeReport")
                        .HasForeignKey("SPerfomance.Statistics.DataAccess.EntityModels.DirectionTypeReportEntity", "RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DirectionTypeReportEntityPart", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.DirectionTypeReportEntity", "Root")
                        .WithMany("Parts")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.GroupStatisticsReportEntity", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.ControlWeekReportEntity", "Root")
                        .WithMany("GroupParts")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.StudentStatisticsOnDisciplinePartEntity", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.StudentStatisticsPartEntity", "Root")
                        .WithMany("Parts")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.StudentStatisticsPartEntity", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.GroupStatisticsReportEntity", "Root")
                        .WithMany("Parts")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.TeacherStatisticsReportPartEntity", b =>
                {
                    b.HasOne("SPerfomance.Statistics.DataAccess.EntityModels.DepartmentStatisticsReportPartEntity", "Root")
                        .WithMany("Parts")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.ControlWeekReportEntity", b =>
                {
                    b.Navigation("CourseReport")
                        .IsRequired();

                    b.Navigation("DepartmentReport")
                        .IsRequired();

                    b.Navigation("DirectionCodeReport")
                        .IsRequired();

                    b.Navigation("DirectionTypeReport")
                        .IsRequired();

                    b.Navigation("GroupParts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.CourseReportEntity", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DepartmentStatisticsReportEntity", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DepartmentStatisticsReportPartEntity", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DirectionCodeReportEntity", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.DirectionTypeReportEntity", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.GroupStatisticsReportEntity", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("SPerfomance.Statistics.DataAccess.EntityModels.StudentStatisticsPartEntity", b =>
                {
                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}
